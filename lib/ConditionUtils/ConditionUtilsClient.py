# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class ConditionUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def get_conditions(self, params, context=None):
        """
        :param params: instance of type "GetConditionParams" (Get condition
           information in a friendly format ws_condition_set_id
           condition_set_ref list<string> conditions - Optional: Which
           conditions should be returned. defaults to all conditions in the
           set Returns {condition_label: {ontology_type(e.g. GO):
           [Factors]}}) -> structure: parameter "condition_set_ref" of type
           "ws_condition_set_id" (@id ws KBaseExperiments.ConditionSet),
           parameter "conditions" of list of String
        :returns: instance of type "GetConditionOutput" -> structure:
           parameter "conditions" of mapping from String to mapping from
           String to list of type "Factor" (Internally this is used to store
           factor information (without the value term) and also a format for
           returning data in a useful form from get_conditions @optional unit
           unit_ont_id unit_ont_ref value) -> structure: parameter "factor"
           of String, parameter "factor_ont_ref" of String, parameter
           "factor_ont_id" of String, parameter "unit" of String, parameter
           "unit_ont_ref" of String, parameter "unit_ont_id" of String,
           parameter "value" of String
        """
        return self._client.call_method(
            'ConditionUtils.get_conditions',
            [params], self._service_ver, context)

    def file_to_condition_set(self, params, context=None):
        """
        :param params: instance of type "FileToConditionSetParams"
           (input_shock_id and input_file_path - alternative input params,)
           -> structure: parameter "input_shock_id" of String, parameter
           "input_file_path" of String, parameter "output_ws_id" of String,
           parameter "output_obj_name" of String
        :returns: instance of type "FileToConditionSetOutput" -> structure:
           parameter "condition_set_ref" of type "ws_condition_set_id" (@id
           ws KBaseExperiments.ConditionSet)
        """
        return self._client.call_method(
            'ConditionUtils.file_to_condition_set',
            [params], self._service_ver, context)

    def condition_set_to_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ConditionSetToTsvFileParams" ->
           structure: parameter "input_ref" of type "ws_condition_set_id"
           (@id ws KBaseExperiments.ConditionSet), parameter
           "destination_dir" of String
        :returns: instance of type "ConditionSetToTsvFileOutput" ->
           structure: parameter "file_path" of String
        """
        return self._client.call_method(
            'ConditionUtils.condition_set_to_tsv_file',
            [params], self._service_ver, context)

    def export_condition_set_tsv(self, params, context=None):
        """
        :param params: instance of type "ExportConditionSetParams" ->
           structure: parameter "input_ref" of type "ws_condition_set_id"
           (@id ws KBaseExperiments.ConditionSet)
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        return self._client.call_method(
            'ConditionUtils.export_condition_set_tsv',
            [params], self._service_ver, context)

    def export_condition_set_excel(self, params, context=None):
        """
        :param params: instance of type "ExportConditionSetParams" ->
           structure: parameter "input_ref" of type "ws_condition_set_id"
           (@id ws KBaseExperiments.ConditionSet)
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        return self._client.call_method(
            'ConditionUtils.export_condition_set_excel',
            [params], self._service_ver, context)

    def export_cluster_set_excel(self, params, context=None):
        """
        :param params: instance of type "ExportClusterSetParams" ->
           structure: parameter "input_ref" of type "ws_cluster_set_id" (@id
           ws KBaseExperiments.ClusterSet)
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        return self._client.call_method(
            'ConditionUtils.export_cluster_set_excel',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('ConditionUtils.status',
                                        [], self._service_ver, context)
